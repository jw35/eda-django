# Generated by Django 5.2.6 on 2025-09-27 10:40

import django.db.models.deletion
import multiselectfield.db.fields
import simple_history.models
import tower_database.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DoveTower',
            fields=[
                ('towerid', models.CharField(blank=True, db_column='TowerID', null=True)),
                ('ringid', models.CharField(db_column='RingID', primary_key=True, serialize=False)),
                ('ringtype', models.CharField(blank=True, db_column='RingType', null=True)),
                ('place', models.CharField(blank=True, db_column='Place', null=True)),
                ('place2', models.CharField(blank=True, db_column='Place2', null=True)),
                ('placecl', models.CharField(blank=True, db_column='PlaceCL', null=True)),
                ('dedicn', models.CharField(blank=True, db_column='Dedicn', null=True)),
                ('towerstatus', models.CharField(blank=True, db_column='TowerStatus', null=True)),
                ('statusfirst', models.CharField(blank=True, db_column='StatusFirst', null=True)),
                ('barededicn', models.CharField(blank=True, db_column='BareDedicn', null=True)),
                ('altname', models.CharField(blank=True, db_column='AltName', null=True)),
                ('ringname', models.CharField(blank=True, db_column='RingName', null=True)),
                ('region', models.CharField(blank=True, db_column='Region', null=True)),
                ('county', models.CharField(blank=True, db_column='County', null=True)),
                ('country', models.CharField(blank=True, db_column='Country', null=True)),
                ('histregion', models.CharField(blank=True, db_column='HistRegion', null=True)),
                ('iso3166code', models.CharField(blank=True, db_column='ISO3166code', null=True)),
                ('diocese', models.CharField(blank=True, db_column='Diocese', null=True)),
                ('lat', models.CharField(blank=True, db_column='Lat', null=True)),
                ('long', models.CharField(blank=True, db_column='Long', null=True)),
                ('bells', models.CharField(blank=True, db_column='Bells', null=True)),
                ('ur', models.CharField(blank=True, db_column='UR', null=True)),
                ('semitones', models.CharField(blank=True, db_column='Semitones', null=True)),
                ('wt', models.CharField(blank=True, db_column='Wt', null=True)),
                ('app', models.CharField(blank=True, db_column='App', null=True)),
                ('note', models.CharField(blank=True, db_column='Note', null=True)),
                ('hz', models.CharField(blank=True, db_column='Hz', null=True)),
                ('details', models.CharField(blank=True, db_column='Details', null=True)),
                ('gf', models.CharField(blank=True, db_column='GF', null=True)),
                ('toilet', models.CharField(blank=True, db_column='Toilet', null=True)),
                ('simulator', models.CharField(blank=True, db_column='Simulator', null=True)),
                ('extrainfo', models.CharField(blank=True, db_column='ExtraInfo', null=True)),
                ('webpage', models.CharField(blank=True, db_column='WebPage', null=True)),
                ('affiliations', models.CharField(blank=True, db_column='Affiliations', null=True)),
                ('ng', models.CharField(blank=True, db_column='NG', null=True)),
                ('postcode', models.CharField(blank=True, db_column='Postcode', null=True)),
                ('practice', models.CharField(blank=True, db_column='Practice', null=True)),
                ('ovhaulyr', models.CharField(blank=True, db_column='OvhaulYr', null=True)),
                ('contractor', models.CharField(blank=True, db_column='Contractor', null=True)),
                ('tuneyr', models.CharField(blank=True, db_column='TuneYr', null=True)),
                ('lgrade', models.CharField(blank=True, db_column='LGrade', null=True)),
                ('bldgid', models.CharField(blank=True, db_column='BldgID', null=True)),
                ('churchcare', models.CharField(blank=True, db_column='ChurchCare', null=True)),
                ('chrassetid', models.CharField(blank=True, db_column='CHRAssetID', null=True)),
                ('towerbase', models.CharField(blank=True, db_column='TowerBase', null=True)),
                ('doveid', models.CharField(blank=True, db_column='DoveID', null=True)),
                ('snlat', models.CharField(blank=True, db_column='SNLat', null=True)),
                ('snlong', models.CharField(blank=True, db_column='SNLong', null=True)),
            ],
            options={
                'db_table': 'dove_towers',
                'ordering': ['place', 'dedicn'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='Contact name (with or without title), or role', max_length=100)),
                ('phone', models.CharField(blank=True, help_text='Contact phone number', max_length=100)),
                ('phone2', models.CharField(blank=True, help_text='Alternate phone number', max_length=100, verbose_name='Phone')),
                ('email', models.EmailField(blank=True, help_text='Contact email address', max_length=100)),
            ],
            options={
                'ordering': ['name', 'email'],
                'constraints': [models.CheckConstraint(condition=models.Q(models.Q(('name', ''), _negated=True), models.Q(('phone', ''), _negated=True), models.Q(('phone2', ''), _negated=True), models.Q(('email', ''), _negated=True), _connector='OR'), name='no_non_blank_contacts', violation_error_message="Contacts can't be entirely blank")],
                'unique_together': {('name', 'phone', 'phone2', 'email')},
            },
        ),
        migrations.CreateModel(
            name='ContactMap',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('C', 'Other Contact'), ('TC', 'Tower Captai'), ('RM', 'Ringing Master'), ('SK', 'Steeplekeeper')], max_length=30)),
                ('publish', models.BooleanField(default=True)),
                ('contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tower_database.contact')),
            ],
            options={
                'ordering': ['tower', 'role'],
            },
        ),
        migrations.CreateModel(
            name='HistoricalContact',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='Contact name (with or without title), or role', max_length=100)),
                ('phone', models.CharField(blank=True, help_text='Contact phone number', max_length=100)),
                ('phone2', models.CharField(blank=True, help_text='Alternate phone number', max_length=100, verbose_name='Phone')),
                ('email', models.EmailField(blank=True, help_text='Contact email address', max_length=100)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical contact',
                'verbose_name_plural': 'historical contacts',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalTower',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('place', models.CharField(help_text='Town or village containing the tower', max_length=100)),
                ('county', models.CharField(choices=[('C', 'Cambridgeshire'), ('N', 'Norfolk')], default='Cambridgeshire', max_length=100)),
                ('dedication', models.CharField(help_text='Church dedication. Use ‘St’ not ‘St.’; ‘and’ not ‘&’', max_length=100)),
                ('full_dedication', models.CharField(blank=True, max_length=100)),
                ('nickname', models.CharField(blank=True, max_length=100)),
                ('district', models.CharField(choices=[('C', 'Cambridge'), ('E', 'Ely'), ('H', 'Huntingdon'), ('W', 'Wisbech')], max_length=10)),
                ('include_dedication', models.BooleanField(default=False, help_text='For places with more than one tower [Cambridge], or for towers in different places that have the same name [Chesterton])')),
                ('ringing_status', models.CharField(blank=True, choices=[('R', 'Regular'), ('O', 'Occasional'), ('N', 'None')], help_text='Full-circle ringing status', max_length=20)),
                ('report', models.BooleanField(default=False, verbose_name='In annual report?')),
                ('service', models.CharField(blank=True, help_text='Short description of normal service ringing. No initial capital (unless day of week)', max_length=200, validators=[tower_database.models.Tower.time_validator, tower_database.models.Tower.initial_capital_validator])),
                ('practice', models.CharField(blank=True, help_text='Short description of normal practice ringing. No initial capital (unless day of week)', max_length=200, validators=[tower_database.models.Tower.time_validator, tower_database.models.Tower.initial_capital_validator])),
                ('practice_day', models.CharField(blank=True, choices=[('Mon', 'Monday'), ('Tue', 'Tuesday'), ('Wed', 'Wednesday'), ('Thu', 'Thursday'), ('Fri', 'Friday'), ('Sat', 'Saturday'), ('Sun', 'Sunday')], help_text='Day of the week of main practice', max_length=9)),
                ('practice_weeks', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('Not', 'Not'), ('1st', '1st'), ('2nd', '2nd'), ('3rd', '3rd'), ('4th', '4th'), ('5th', '5th'), ('Alt', 'Alternate')], help_text='Week(s) of the month for main practice if not all', max_length=50, validators=[tower_database.models.Tower.week_validator])),
                ('travel_check', models.BooleanField(default=False, help_text='Check before travelling to practices?')),
                ('bells', models.PositiveIntegerField(blank=True, help_text='Number of ringable bells', null=True, validators=[tower_database.models.Tower.bell_validator])),
                ('ring_type', models.CharField(blank=True, choices=[('Full', 'Full-circle ring'), ('Light', 'Lightweight ring'), ('Carillon', 'Carillon'), ('C-chine', 'Clock chime'), ('T-chime', 'Tubular chime'), ('H-chinme', 'Hemispherical chime'), ('Chime', 'Chime'), ('Display', 'Display bells'), ('Future', 'Future ring'), ('Other', 'Other bells')], max_length=20)),
                ('weight', models.CharField(blank=True, help_text='Use ‘15-3-13’ or ‘6cwt’', max_length=50, validators=[tower_database.models.Tower.weight_validator])),
                ('note', models.CharField(blank=True, help_text="Use A-G optionally followed by '#' or ‘b’", max_length=10, validators=[tower_database.models.Tower.note_validator])),
                ('gf', models.BooleanField(blank=True, null=True, verbose_name='Ground Floor?')),
                ('os_grid', models.CharField(blank=True, max_length=8, validators=[tower_database.models.Tower.grid_validator], verbose_name='OS Grid')),
                ('postcode', models.CharField(blank=True, max_length=10, validators=[tower_database.models.Tower.postcode_validator])),
                ('lat', models.DecimalField(blank=True, decimal_places=3, max_digits=5, null=True)),
                ('lng', models.DecimalField(blank=True, decimal_places=3, max_digits=5, null=True)),
                ('contact_use', models.CharField(choices=[('All', 'All'), ('Bells only', 'Bells Only'), ('Band only', 'Band Only'), ('None', 'None')], default='All', help_text='Intended use of contact details', max_length=10)),
                ('peals', models.PositiveIntegerField(blank=True, help_text='Peals in most recent Annual Report', null=True)),
                ('dove_towerid', models.CharField(blank=True, max_length=10, verbose_name='Dove TowerID')),
                ('dove_ringid', models.CharField(blank=True, max_length=10, verbose_name='Dove RingID')),
                ('towerbase_id', models.CharField(blank=True, max_length=10, verbose_name='Towerbase ID')),
                ('notes', models.CharField(blank=True, help_text='For display, especially in the Annual Report', max_length=100)),
                ('long_notes', models.TextField(blank=True, help_text='For display when space isn’t at a premium')),
                ('maintainer_notes', models.TextField(blank=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('primary_contact', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='tower_database.contact')),
            ],
            options={
                'verbose_name': 'historical tower',
                'verbose_name_plural': 'historical towers',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='Tower',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('place', models.CharField(help_text='Town or village containing the tower', max_length=100)),
                ('county', models.CharField(choices=[('C', 'Cambridgeshire'), ('N', 'Norfolk')], default='Cambridgeshire', max_length=100)),
                ('dedication', models.CharField(help_text='Church dedication. Use ‘St’ not ‘St.’; ‘and’ not ‘&’', max_length=100)),
                ('full_dedication', models.CharField(blank=True, max_length=100)),
                ('nickname', models.CharField(blank=True, max_length=100)),
                ('district', models.CharField(choices=[('C', 'Cambridge'), ('E', 'Ely'), ('H', 'Huntingdon'), ('W', 'Wisbech')], max_length=10)),
                ('include_dedication', models.BooleanField(default=False, help_text='For places with more than one tower [Cambridge], or for towers in different places that have the same name [Chesterton])')),
                ('ringing_status', models.CharField(blank=True, choices=[('R', 'Regular'), ('O', 'Occasional'), ('N', 'None')], help_text='Full-circle ringing status', max_length=20)),
                ('report', models.BooleanField(default=False, verbose_name='In annual report?')),
                ('service', models.CharField(blank=True, help_text='Short description of normal service ringing. No initial capital (unless day of week)', max_length=200, validators=[tower_database.models.Tower.time_validator, tower_database.models.Tower.initial_capital_validator])),
                ('practice', models.CharField(blank=True, help_text='Short description of normal practice ringing. No initial capital (unless day of week)', max_length=200, validators=[tower_database.models.Tower.time_validator, tower_database.models.Tower.initial_capital_validator])),
                ('practice_day', models.CharField(blank=True, choices=[('Mon', 'Monday'), ('Tue', 'Tuesday'), ('Wed', 'Wednesday'), ('Thu', 'Thursday'), ('Fri', 'Friday'), ('Sat', 'Saturday'), ('Sun', 'Sunday')], help_text='Day of the week of main practice', max_length=9)),
                ('practice_weeks', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('Not', 'Not'), ('1st', '1st'), ('2nd', '2nd'), ('3rd', '3rd'), ('4th', '4th'), ('5th', '5th'), ('Alt', 'Alternate')], help_text='Week(s) of the month for main practice if not all', max_length=50, validators=[tower_database.models.Tower.week_validator])),
                ('travel_check', models.BooleanField(default=False, help_text='Check before travelling to practices?')),
                ('bells', models.PositiveIntegerField(blank=True, help_text='Number of ringable bells', null=True, validators=[tower_database.models.Tower.bell_validator])),
                ('ring_type', models.CharField(blank=True, choices=[('Full', 'Full-circle ring'), ('Light', 'Lightweight ring'), ('Carillon', 'Carillon'), ('C-chine', 'Clock chime'), ('T-chime', 'Tubular chime'), ('H-chinme', 'Hemispherical chime'), ('Chime', 'Chime'), ('Display', 'Display bells'), ('Future', 'Future ring'), ('Other', 'Other bells')], max_length=20)),
                ('weight', models.CharField(blank=True, help_text='Use ‘15-3-13’ or ‘6cwt’', max_length=50, validators=[tower_database.models.Tower.weight_validator])),
                ('note', models.CharField(blank=True, help_text="Use A-G optionally followed by '#' or ‘b’", max_length=10, validators=[tower_database.models.Tower.note_validator])),
                ('gf', models.BooleanField(blank=True, null=True, verbose_name='Ground Floor?')),
                ('os_grid', models.CharField(blank=True, max_length=8, validators=[tower_database.models.Tower.grid_validator], verbose_name='OS Grid')),
                ('postcode', models.CharField(blank=True, max_length=10, validators=[tower_database.models.Tower.postcode_validator])),
                ('lat', models.DecimalField(blank=True, decimal_places=3, max_digits=5, null=True)),
                ('lng', models.DecimalField(blank=True, decimal_places=3, max_digits=5, null=True)),
                ('contact_use', models.CharField(choices=[('All', 'All'), ('Bells only', 'Bells Only'), ('Band only', 'Band Only'), ('None', 'None')], default='All', help_text='Intended use of contact details', max_length=10)),
                ('peals', models.PositiveIntegerField(blank=True, help_text='Peals in most recent Annual Report', null=True)),
                ('dove_towerid', models.CharField(blank=True, max_length=10, verbose_name='Dove TowerID')),
                ('dove_ringid', models.CharField(blank=True, max_length=10, verbose_name='Dove RingID')),
                ('towerbase_id', models.CharField(blank=True, max_length=10, verbose_name='Towerbase ID')),
                ('notes', models.CharField(blank=True, help_text='For display, especially in the Annual Report', max_length=100)),
                ('long_notes', models.TextField(blank=True, help_text='For display when space isn’t at a premium')),
                ('maintainer_notes', models.TextField(blank=True)),
                ('other_contacts', models.ManyToManyField(related_name='tower_oher_set', through='tower_database.ContactMap', to='tower_database.contact')),
                ('primary_contact', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='tower_primary_set', to='tower_database.contact')),
            ],
            options={
                'ordering': ['place', 'dedication'],
            },
        ),
        migrations.CreateModel(
            name='HistoricalWebsite',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('website', models.URLField()),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('tower', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='tower_database.tower')),
            ],
            options={
                'verbose_name': 'historical website',
                'verbose_name_plural': 'historical websites',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalContactMap',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('role', models.CharField(choices=[('C', 'Other Contact'), ('TC', 'Tower Captai'), ('RM', 'Ringing Master'), ('SK', 'Steeplekeeper')], max_length=30)),
                ('publish', models.BooleanField(default=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('contact', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='tower_database.contact')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('tower', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='tower_database.tower')),
            ],
            options={
                'verbose_name': 'historical contact map',
                'verbose_name_plural': 'historical contact maps',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddField(
            model_name='contactmap',
            name='tower',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tower_database.tower'),
        ),
        migrations.CreateModel(
            name='Website',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('website', models.URLField()),
                ('tower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tower_database.tower')),
            ],
            options={
                'ordering': ['website'],
            },
        ),
        migrations.AddConstraint(
            model_name='tower',
            constraint=models.UniqueConstraint(fields=('place', 'dedication'), name='unique_place_dedication', violation_error_message="Can't have two towers with the same place and dedication"),
        ),
    ]
